// Motor driver pins
#define ENA 5  
#define IN1 6  
#define IN2 7  
#define IN3 8  
#define IN4 9  
#define ENB 10 

// Buzzer pin
#define BUZZER 11

// IR sensors
#define RIGHT_SENSOR A0  
#define LEFT_SENSOR A1  

// Ultrasonic sensor pins
#define TRIG_FRONT 4
#define ECHO_FRONT 3

#define TRIG_RIGHT 12
#define ECHO_RIGHT 13

#define TRIG_LEFT 22
#define ECHO_LEFT 24

// Relay pin for water pump
#define PUMP_RELAY 26

// Pump control timing
const unsigned long pumpCycle = 5000;
const unsigned long pumpOnDuration = 200;

unsigned long lastPumpMillis = 0;
bool pumpflag = false;
bool isStopped = false;

const int lineThreshold = 500;

// Get distance from ultrasonic sensor
long getDistance(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH, 25000); // 25ms timeout
    if (duration == 0) return 999;
    return duration * 0.034 / 2;
}

// Movement functions
void moveForward() {
    isStopped = false;
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENA, 180); 
    analogWrite(ENB, 180);
}

void turnLeft() {
    isStopped = false;
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENA, 220);
    analogWrite(ENB, 220);
}

void turnRight() {
    isStopped = false;
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENA, 220);
    analogWrite(ENB, 220);
}

void stopMovement() {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    analogWrite(ENA, 0);
    analogWrite(ENB, 0);
    isStopped = true;
}

void setup() {
    Serial.begin(9600); 

    pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT); pinMode(ENB, OUTPUT);

    pinMode(RIGHT_SENSOR, INPUT); pinMode(LEFT_SENSOR, INPUT);

    pinMode(TRIG_FRONT, OUTPUT); pinMode(ECHO_FRONT, INPUT);
    pinMode(TRIG_RIGHT, OUTPUT); pinMode(ECHO_RIGHT, INPUT);
    pinMode(TRIG_LEFT, OUTPUT); pinMode(ECHO_LEFT, INPUT);

    pinMode(BUZZER, OUTPUT);
    digitalWrite(BUZZER, LOW);

    pinMode(PUMP_RELAY, OUTPUT);
    digitalWrite(PUMP_RELAY, HIGH); 
}

void loop() {
    static unsigned long lastUltrasonicCheck = 0;
    static long frontDistance = 100;
    static long rightDistance = 100;
    static long leftDistance = 100;

    unsigned long currentMillis = millis();

    // Update ultrasonic sensor data every 100ms
    if (currentMillis - lastUltrasonicCheck > 100) {
        lastUltrasonicCheck = currentMillis;
        frontDistance = getDistance(TRIG_FRONT, ECHO_FRONT);
        rightDistance = getDistance(TRIG_RIGHT, ECHO_RIGHT);
        leftDistance = getDistance(TRIG_LEFT, ECHO_LEFT);
    }

    int rightIR = analogRead(RIGHT_SENSOR);
    int leftIR = analogRead(LEFT_SENSOR);

    bool rightLineDetected = (rightIR > lineThreshold);
    bool leftLineDetected = (leftIR > lineThreshold);

    bool isPickedUp = (rightIR < 100 && leftIR < 100);

    bool obstacleDetected = (frontDistance <= 20 || rightDistance <= 20 || leftDistance <= 20);

    if (obstacleDetected) {
        stopMovement();
        tone(BUZZER, 2000);
    } else {
        noTone(BUZZER);

        // Line following logic
        if (!rightLineDetected && !leftLineDetected) {
            moveForward(); 
        } else if (rightLineDetected && !leftLineDetected) {
            turnLeft();
        } else if (!rightLineDetected && leftLineDetected) {
            turnRight();
        } else {
            stopMovement();
        }
    }

    // Pump control logic
    if (isStopped || isPickedUp) {
        digitalWrite(PUMP_RELAY, HIGH);  
        pumpflag = false;
        lastPumpMillis = currentMillis;  
    } else {
        if (!pumpflag && (currentMillis - lastPumpMillis >= pumpCycle)) {
            digitalWrite(PUMP_RELAY, LOW);  
            pumpflag = true;
            lastPumpMillis = currentMillis;
        }

        if (pumpflag && (currentMillis - lastPumpMillis >= pumpOnDuration)) {
            digitalWrite(PUMP_RELAY, HIGH);  
            pumpflag = false;
            lastPumpMillis = currentMillis;
        }
    }
}